// Mocks generated by Mockito 5.4.6 from annotations
// in rdf_mapper/test/src/deserializers/literal_term_deserializer_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:rdf_core/rdf_core.dart' as _i4;
import 'package:rdf_mapper/src/api/deserialization_context.dart' as _i3;
import 'package:rdf_mapper/src/api/deserializer.dart' as _i5;
import 'package:rdf_mapper/src/api/resource_reader.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResourceReader_0 extends _i1.SmartFake
    implements _i2.ResourceReader {
  _FakeResourceReader_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DeserializationContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeserializationContext extends _i1.Mock
    implements _i3.DeserializationContext {
  MockDeserializationContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ResourceReader reader(_i4.RdfSubject? subject) => (super.noSuchMethod(
        Invocation.method(
          #reader,
          [subject],
        ),
        returnValue: _FakeResourceReader_0(
          this,
          Invocation.method(
            #reader,
            [subject],
          ),
        ),
      ) as _i2.ResourceReader);

  @override
  List<_i4.Triple> getTriplesForSubject(
    _i4.RdfSubject? subject, {
    bool? includeBlankNodes = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTriplesForSubject,
          [subject],
          {#includeBlankNodes: includeBlankNodes},
        ),
        returnValue: <_i4.Triple>[],
      ) as List<_i4.Triple>);

  @override
  T fromLiteralTerm<T>(
    _i4.LiteralTerm? term, {
    _i5.LiteralTermDeserializer<T>? deserializer,
    bool? bypassDatatypeCheck = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fromLiteralTerm,
          [term],
          {
            #deserializer: deserializer,
            #bypassDatatypeCheck: bypassDatatypeCheck,
          },
        ),
        returnValue: _i6.dummyValue<T>(
          this,
          Invocation.method(
            #fromLiteralTerm,
            [term],
            {
              #deserializer: deserializer,
              #bypassDatatypeCheck: bypassDatatypeCheck,
            },
          ),
        ),
      ) as T);
}

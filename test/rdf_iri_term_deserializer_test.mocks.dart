// Mocks generated by Mockito 5.4.6 from annotations
// in rdf_mapper/test/rdf_iri_term_deserializer_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:rdf_core/graph/rdf_term.dart' as _i3;
import 'package:rdf_mapper/src/api/deserialization_context.dart' as _i2;
import 'package:rdf_mapper/src/deserializers/rdf_blank_node_term_deserializer.dart'
    as _i7;
import 'package:rdf_mapper/src/deserializers/rdf_iri_term_deserializer.dart'
    as _i5;
import 'package:rdf_mapper/src/deserializers/rdf_literal_term_deserializer.dart'
    as _i6;
import 'package:rdf_mapper/src/deserializers/rdf_subject_deserializer.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DeserializationContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeserializationContext extends _i1.Mock
    implements _i2.DeserializationContext {
  MockDeserializationContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  T require<T>(
    _i3.RdfSubject? subject,
    _i3.RdfPredicate? predicate, {
    bool? enforceSingleValue = true,
    _i4.RdfSubjectDeserializer<T>? subjectDeserializer,
    _i5.RdfIriTermDeserializer<T>? iriDeserializer,
    _i6.RdfLiteralTermDeserializer<T>? literalDeserializer,
    _i7.RdfBlankNodeTermDeserializer<T>? blankNodeDeserializer,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #require,
              [subject, predicate],
              {
                #enforceSingleValue: enforceSingleValue,
                #subjectDeserializer: subjectDeserializer,
                #iriDeserializer: iriDeserializer,
                #literalDeserializer: literalDeserializer,
                #blankNodeDeserializer: blankNodeDeserializer,
              },
            ),
            returnValue: _i8.dummyValue<T>(
              this,
              Invocation.method(
                #require,
                [subject, predicate],
                {
                  #enforceSingleValue: enforceSingleValue,
                  #subjectDeserializer: subjectDeserializer,
                  #iriDeserializer: iriDeserializer,
                  #literalDeserializer: literalDeserializer,
                  #blankNodeDeserializer: blankNodeDeserializer,
                },
              ),
            ),
          )
          as T);

  @override
  T? get<T>(
    _i3.RdfSubject? subject,
    _i3.RdfPredicate? predicate, {
    bool? enforceSingleValue = true,
    _i5.RdfIriTermDeserializer<T>? iriDeserializer,
    _i4.RdfSubjectDeserializer<T>? subjectDeserializer,
    _i6.RdfLiteralTermDeserializer<T>? literalDeserializer,
    _i7.RdfBlankNodeTermDeserializer<T>? blankNodeDeserializer,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [subject, predicate],
              {
                #enforceSingleValue: enforceSingleValue,
                #iriDeserializer: iriDeserializer,
                #subjectDeserializer: subjectDeserializer,
                #literalDeserializer: literalDeserializer,
                #blankNodeDeserializer: blankNodeDeserializer,
              },
            ),
          )
          as T?);

  @override
  R getMany<T, R>(
    _i3.RdfSubject? subject,
    _i3.RdfPredicate? predicate,
    R Function(Iterable<T>)? collector, {
    _i5.RdfIriTermDeserializer<T>? iriDeserializer,
    _i4.RdfSubjectDeserializer<T>? subjectDeserializer,
    _i6.RdfLiteralTermDeserializer<T>? literalDeserializer,
    _i7.RdfBlankNodeTermDeserializer<T>? blankNodeDeserializer,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getMany,
              [subject, predicate, collector],
              {
                #iriDeserializer: iriDeserializer,
                #subjectDeserializer: subjectDeserializer,
                #literalDeserializer: literalDeserializer,
                #blankNodeDeserializer: blankNodeDeserializer,
              },
            ),
            returnValue: _i8.dummyValue<R>(
              this,
              Invocation.method(
                #getMany,
                [subject, predicate, collector],
                {
                  #iriDeserializer: iriDeserializer,
                  #subjectDeserializer: subjectDeserializer,
                  #literalDeserializer: literalDeserializer,
                  #blankNodeDeserializer: blankNodeDeserializer,
                },
              ),
            ),
          )
          as R);

  @override
  List<T> getList<T>(
    _i3.RdfSubject? subject,
    _i3.RdfPredicate? predicate, {
    _i5.RdfIriTermDeserializer<T>? iriDeserializer,
    _i4.RdfSubjectDeserializer<T>? subjectDeserializer,
    _i6.RdfLiteralTermDeserializer<T>? literalDeserializer,
    _i7.RdfBlankNodeTermDeserializer<T>? blankNodeDeserializer,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getList,
              [subject, predicate],
              {
                #iriDeserializer: iriDeserializer,
                #subjectDeserializer: subjectDeserializer,
                #literalDeserializer: literalDeserializer,
                #blankNodeDeserializer: blankNodeDeserializer,
              },
            ),
            returnValue: <T>[],
          )
          as List<T>);

  @override
  Map<K, V> getMap<K, V>(
    _i3.RdfSubject? subject,
    _i3.RdfPredicate? predicate, {
    _i5.RdfIriTermDeserializer<MapEntry<K, V>>? iriDeserializer,
    _i4.RdfSubjectDeserializer<MapEntry<K, V>>? subjectDeserializer,
    _i6.RdfLiteralTermDeserializer<MapEntry<K, V>>? literalDeserializer,
    _i7.RdfBlankNodeTermDeserializer<MapEntry<K, V>>? blankNodeDeserializer,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getMap,
              [subject, predicate],
              {
                #iriDeserializer: iriDeserializer,
                #subjectDeserializer: subjectDeserializer,
                #literalDeserializer: literalDeserializer,
                #blankNodeDeserializer: blankNodeDeserializer,
              },
            ),
            returnValue: <K, V>{},
          )
          as Map<K, V>);
}
